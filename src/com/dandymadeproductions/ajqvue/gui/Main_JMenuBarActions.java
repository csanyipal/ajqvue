//=================================================================
//                       Main JMenuBarActions
//=================================================================
//
//    This class provides the means for selecting the type of actions
// to execute that are a result of the Main_JMenuBar.actionPerformed()
// events generated by the JMenuBar & JTooBar in the application.
//
//                  << Main_JMenuBarActions.java >>
//
//=================================================================
// Copyright (C) 2016-2017 Dana M. Proctor
// Version 1.2 06/08/2017
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version
// 2 of the License, or (at your option) any later version. This
// program is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
// the GNU General Public License for more details. You should
// have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// (http://opensource.org)
//
//=================================================================
// Revision History
// Changes to the code should be documented here and reflected
// in the present version number. Author information should
// also be included with the original copyright author.
//=================================================================
// Version 1.0 Production Main_JMenuBarActions Class.
//         1.1 Updated References to PluginModule to Plugin_Module.
//         1.2 Method actionSelection() Added Processing for Clear Table
//             History Action.
//             
//-----------------------------------------------------------------
//                 danap@dandymadeproductions.com
//=================================================================

package com.dandymadeproductions.ajqvue.gui;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import javax.sound.sampled.Clip;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;

import com.dandymadeproductions.ajqvue.Ajqvue;
import com.dandymadeproductions.ajqvue.datasource.ConnectionManager;
import com.dandymadeproductions.ajqvue.datasource.ConnectionProperties;
import com.dandymadeproductions.ajqvue.gui.AboutFrame.HelpFrameThread;
import com.dandymadeproductions.ajqvue.gui.panels.AppGeneralPreferencesPanel;
import com.dandymadeproductions.ajqvue.gui.panels.DBTablesPanel;
import com.dandymadeproductions.ajqvue.gui.panels.TableTabPanel;
import com.dandymadeproductions.ajqvue.io.CSVDataDumpThread;
import com.dandymadeproductions.ajqvue.io.CSVDataImportThread;
import com.dandymadeproductions.ajqvue.io.LoadTableStateThread;
import com.dandymadeproductions.ajqvue.io.PDFDataTableDumpThread;
import com.dandymadeproductions.ajqvue.io.SQLDataDumpImportThread;
import com.dandymadeproductions.ajqvue.io.SQLDataDumpThread;
import com.dandymadeproductions.ajqvue.io.SQLDatabaseDumpThread;
import com.dandymadeproductions.ajqvue.io.SQLDatabaseSchemeDumpThread;
import com.dandymadeproductions.ajqvue.io.SaveTableStateThread;
import com.dandymadeproductions.ajqvue.plugin.Plugin_Module;
import com.dandymadeproductions.ajqvue.utilities.InputDialog;
import com.dandymadeproductions.ajqvue.utilities.MyJFileFilter;
import com.dandymadeproductions.ajqvue.utilities.AResourceBundle;
import com.dandymadeproductions.ajqvue.utilities.Utils;

/**
 *    The Main_JMenuBarActions class provides the means for
 * selecting the type of actions to execute that are a result of
 * the Main_JMenuBar.actionPerformed() events generated by the
 * JMenuBar and JToolBar in the application.
 * 
 * @author Dana M. Proctor
 * @version 1.2 06/08/2017
 */

class Main_JMenuBarActions extends Ajqvue implements MenuActionCommands
{
   // Class Instances
   private static boolean preferencesVisible = false;
   private static boolean sqlQueryBucketFrameVisible = false;
   private static boolean queryFrameVisible = false;
   private static boolean searchFrameVisible = false;
   private static boolean pluginFrameVisible = false;
   private static String lastOpenSaveDirectory = "";
   private static String lastImportDirectory = "";
   private static String lastExportDirectory = "";
   private static String fileSeparator;
   
   private static String DATA_EXPORT_CSV = "DECSV";
   private static String DATA_EXPORT_PDF = "DEPDF";
   private static String DATA_EXPORT_SQL = "DESQL";

   // Print instances.
   private static PrinterJob currentPrintJob = PrinterJob.getPrinterJob();
   private static PageFormat mPageFormat = currentPrintJob.defaultPage();

   //==============================================================
   // Class method to determine which JMenuBar or JToolBar item was
   // selected and then executing the appropriate response.
   //==============================================================

   protected static void actionsSelection(Main_Frame parent, ActionEvent evt,
                                          SQLQueryBucketFrame sqlQueryBucketFrame,
                                          String[] version,
                                          String webSiteString)
   {
      // Setting up some needed instance variables.
      String actionCommand;
      Object item;

      fileSeparator = Utils.getFileSeparator();

      // Initializing
      
      item = evt.getSource();

      if (item instanceof JMenuItem)
      {
         if (item instanceof JRadioButtonMenuItem)
            actionCommand = "Schemas";
         else
            actionCommand = ((JMenuItem) item).getActionCommand();
      }
      
      else if (item instanceof JButton)
         actionCommand = ((JButton) item).getActionCommand();
      
      else
         actionCommand = "";
      
      //System.out.println(actionCommand);
      
      // ==================================
      // Top Frame Item Selection Routing
      // ==================================
      
      // Edit General Preferences
      if (actionCommand.equals(ACTION_GENERAL_PROPERTIES))
      {
         generalPropertiesAction(parent);
      }
      
      // Plugin Management
      if (actionCommand.equals(ACTION_PLUGIN_MANAGEMENT))
      {
         // Showing the Edit Preferences Frame.
         if (!pluginFrameVisible)
         {
            PluginFrame managePluginPreferences = new PluginFrame(parent);
            managePluginPreferences.setSize(750, 475);
            managePluginPreferences.center();
            managePluginPreferences.setVisible(true);
            managePluginPreferences.startAnimation();
            pluginFrameVisible = true;
         }
         // Setting existing to front.
         else
            Utils.windowToFront("PluginFrame");
         
         return;
      }
      
      // ==================================
      // File Menu Item Selection Routing
      // ==================================

      // Open
      if (actionCommand.equals(ACTION_OPEN) && DBTablesPanel.getTableCount() != 0)
      {
         openAction(parent);
         return;
      }
      
      // Save & Save As..
      if ((actionCommand.equals(ACTION_SAVE) || actionCommand.equals(ACTION_SAVE_AS))
           && DBTablesPanel.getTableCount() != 0)
      {
         saveAction(parent, actionCommand);
         return;
      }

      // Print
      if (actionCommand.equals(ACTION_PRINT) && DBTablesPanel.getTableCount() != 0)
      {
         printAction();
         return;
      }

      // Print PageFormat Dialog
      if (actionCommand.equals(ACTION_PAGE_FORMAT) && DBTablesPanel.getTableCount() != 0)
      {
         currentPrintJob = PrinterJob.getPrinterJob();
         mPageFormat = currentPrintJob.pageDialog(mPageFormat);
         return;
      }
      
      // Exit
      if (actionCommand.equals(ACTION_EXIT))
      {
         // Save Query Bucket Data.
         sqlQueryBucketFrame.saveLastUsedList();
         
         // Shutdown Connection as Needed.
         ConnectionManager.shutdown("Main_JMenuBarActions ACTION_EXIT");
         
         // Notify plugins to pending close.
         Iterator<Plugin_Module> pluginModulesIterator = Main_Frame.getPlugins().iterator();
         while (pluginModulesIterator.hasNext())
         {
            Plugin_Module currentPlugin = pluginModulesIterator.next();
            currentPlugin.shutdown();
         }
         
         // Clear Cache
         Utils.clearCache();
         
         // Save Frame Size & Position
         Ajqvue.getGeneralProperties().setPosition(new Point(parent.getX(), parent.getY()));
         Ajqvue.getGeneralProperties().setDimension(parent.getSize());
         System.exit(0);
      }

      // ==================================
      // Edit Menu Item Selection Routing
      // ==================================

      // Clear Table History
      if (actionCommand.equals(ACTION_CLEAR_HISTORY) && DBTablesPanel.getTableCount() != 0)
      {
         DBTablesPanel.getSelectedTableTabPanel().clearHistory();
         return;
      }
      
      // Preferences
      if (actionCommand.equals(ACTION_PREFERENCES) && DBTablesPanel.getTableCount() != 0)
      {
         // Showing the Edit Preferences Frame.
         if (!preferencesVisible)
         {
            PreferencesFrame editPreferences = new PreferencesFrame();
            editPreferences.setSize(800, 550);
            editPreferences.setResizable(true);
            editPreferences.center();
            editPreferences.setVisible(true);
            preferencesVisible = true;
         }
         // Setting existing to front.
         else
            Utils.windowToFront("PreferencesFrame");
         
         return;
      }

      // ==================================
      // Data Menu Item Selection Routing
      // ==================================

      // Data Import
      if (actionCommand.equals(ACTION_IMPORT_SQL_DUMP)
          || (actionCommand.equals(ACTION_IMPORT_CSV_FILE) && DBTablesPanel.getTableCount() != 0))
      {
         dataImportAction(parent, actionCommand);
         return;
      }

      // Data Export
      if ((actionCommand.indexOf(DATA_EXPORT_CSV) != -1 || actionCommand.indexOf(DATA_EXPORT_PDF) != -1
            || actionCommand.indexOf(DATA_EXPORT_SQL) != -1)
           && DBTablesPanel.getTableCount() != 0)
      {
         dataExportAction(parent, actionCommand, version);
         return;
      }

      // ==================================
      // Tools Menu Item Selection Routing
      // ==================================

      // SQL Query Bucket
      if (actionCommand.equals(ACTION_SQL_QUERY_BUCKET))
      {
         if (!sqlQueryBucketFrameVisible)
         {
            sqlQueryBucketFrame.setVisible(true);
            sqlQueryBucketFrameVisible = true;
         }
         else
            Utils.windowToFront("SQLQueryBucketFrame");
         
         return;
      }
      
      // Query Frame
      if (actionCommand.equals(ACTION_QUERY_FRAME))
      {
         if (!queryFrameVisible)
         {
            QueryFrame queryFrame = new QueryFrame(parent);
            queryFrame.setSize(Ajqvue.getGeneralProperties().getQueryFrameDimension());
            queryFrame.setLocation(Ajqvue.getGeneralProperties().getQueryFramePosition());
            queryFrame.setVisible(true);
            queryFrameVisible = true;
         }
         else
            Utils.windowToFront("QueryFrame");
         
         return;
      }
      
      // Reload Database
      if (actionCommand.equals(ACTION_RELOAD_DATABASE))
      {
         DBTablesPanel.startStatusTimer();
         
         Thread reloadDatabaseThread = new Thread(new Runnable()
         {
            public void run()
            {
               // Make sure and load all available schemas
               // in case filtering is off in configuration
               // file.
               
               ConnectionManager.setSchemaPattern(ConnectionManager.getAllSchemasPattern());
               
               // Reload
               Main_Frame.reloadDBTables();
               Main_JMenuBar.reloadSchemasMenu();
               DBTablesPanel.stopStatusTimer();
            }
         }, "Main_JMenuBarActions.reloadDatabaseThread");
         reloadDatabaseThread.start();
         return;
      }
      
      // Search Database
      if (actionCommand.equals(ACTION_SEARCH_DATABASE) && DBTablesPanel.getTableCount() != 0)
      {
         if (!searchFrameVisible)
         {
            SearchFrame searchFrame = new SearchFrame();
            searchFrame.setSize(800, 500);
            searchFrame.center();
            searchFrame.setVisible(true);
            searchFrameVisible = true;
         }
         else
            Utils.windowToFront("SearchFrame");
         
         return;
      }
      
      // ==================================
      // Schemas Menu Item Selection Routing
      // ==================================

      // Load Schemas
      if (actionCommand.equals("Schemas"))
      {
         actionCommand = ((JRadioButtonMenuItem) item).getActionCommand();
         
         if (actionCommand.equals("All"))
         {
            actionCommand = ConnectionManager.getAllSchemasPattern();
         }
         ConnectionManager.setSchemaPattern(actionCommand);
         
         DBTablesPanel.startStatusTimer();
         
         Thread loadSchemasThread = new Thread(new Runnable()
         {
            public void run()
            {
               Main_Frame.reloadDBTables(); 
               DBTablesPanel.stopStatusTimer();
            }
         }, "Main_JMenuBarActions.loadSchemasThread");
         loadSchemasThread.start();
         return;
      }
      
      // ==================================
      // Help Menu Item Selection Routing
      // ==================================

      // Manual
      if (actionCommand.equals(ACTION_MANUAL))
      {
         Thread manualFrameThread = new Thread(new HelpFrameThread("Ajqvue Manual",
                                                                   "/docs/Manual/Ajqvue_Manual.html"),
                                               "Main_JMenuBarActions.manualFrameThread");
         manualFrameThread.start();
         return;
      }
      
      // Legal
      if (actionCommand.equals(ACTION_LEGAL))
      {
         Thread legalFrameThread = new Thread(new HelpFrameThread("Ajqvue Legal",
                                                                  "/docs/Release/legal.html"),
                                              "Main_JMenuBarActions.legalFrameThread");
         legalFrameThread.start();
         return;
      }

      // Release Notes (Readme)
      if (actionCommand.equals(ACTION_RELEASE_NOTES))
      {
         Thread readmeFrameThread = new Thread(new HelpFrameThread("Ajqvue Readme",
                                                                  "/docs/Release/readme.html"),
                                               "Main_JMenuBarActions.readmeFrameThread");
         readmeFrameThread.start();
         return;
      }
      
      // About
      if (actionCommand.equals(ACTION_ABOUT))
      {
         ImageIcon ajqvueLogo = Ajqvue.getResourceBundle().getResourceImage("images" + fileSeparator
                                                               + "Ajqvue_Logo.png");
         AboutFrame about_Frame = new AboutFrame(version, webSiteString, ajqvueLogo);
         about_Frame.setSize(400, 325);
         about_Frame.center();
         about_Frame.setResizable(true);
         about_Frame.setVisible(true);
         return;
      }

      // ========================================
      // Special User/Database Selection Action
      // ========================================

      // Flush Privileges for root/mysql
      if (actionCommand.equals(ACTION_FLUSH))
      {
         boolean flushed = false;
         try
         {
            flushed = flushPrivileges();
         }
         catch (SQLException e)
         {
            ConnectionManager.displaySQLErrors(e, "Main_JMenuBarActions.actionsSelection()");
         }
         
         if (flushed)
         {
            Thread flushSoundThread = new Thread(new Runnable()
            {
               public void run()
               {
                  Clip flushSoundClip = Utils.getAudioClip("sounds" + fileSeparator + "flush.wav");
                  
                  if (flushSoundClip != null)
                  {
                     flushSoundClip.setFramePosition(0);
                     flushSoundClip.start();
                     try
                     {
                        Thread.sleep(5000);
                     }
                     catch (InterruptedException e) {}
                     flushSoundClip.close();   
                  }
               }
            }, "Main_JMenuBarActions.flushSoundThread");
            flushSoundThread.start();
         }
         return;
      }
   }
   
   //==============================================================
   // Class method used for the general properties  to be set.
   // These would be language and font size.
   //==============================================================

   private static void generalPropertiesAction(Main_Frame parent)
   {
      // Method Instances.
      AppGeneralPreferencesPanel appGeneralPreferencesPanel;
      
      AResourceBundle resourceBundle;
      String resource, resourceOK, resourceCancel;
      
      // Setup
      
      resourceBundle = Ajqvue.getResourceBundle();
      appGeneralPreferencesPanel = new AppGeneralPreferencesPanel();
      
      // Create a dialog of the components.
      
      Object content[] = {appGeneralPreferencesPanel};

      resource = resourceBundle.getResourceString("Main_JMenuBarActions.label.GeneralPreferences",
                                                  "General Preferences");
      resourceOK = resourceBundle.getResourceString("Main_JMenuBarActions.button.OK", "OK");
      resourceCancel = resourceBundle.getResourceString("Main_JMenuBarActions.button.Cancel",
                                                        "Cancel");
      
      InputDialog generalPreferencesDialog = new InputDialog(null, resource, resourceOK, resourceCancel,
                                                  content, null);
      generalPreferencesDialog.pack();
      generalPreferencesDialog.setResizable(true);
      generalPreferencesDialog.center();
      generalPreferencesDialog.setVisible(true);

      // Collect the changes and updating as needed.

      if (generalPreferencesDialog.isActionResult())
      {
         parent.setFontSize(appGeneralPreferencesPanel.getFontSize());
         
         if (!appGeneralPreferencesPanel.getLocalization().equals(Ajqvue.getLocaleString()))
         {
            try
            {
               appGeneralPreferencesPanel.setLocalization(appGeneralPreferencesPanel.getLocalization());
            }
            catch (IOException ioe)
            {
               if (Ajqvue.getDebug())
                  System.out.println("Main_JMenuBar setGeneralPreferences() " + ioe);
            }
         } 
      }
      
      generalPreferencesDialog.dispose();
   }
   
   //==============================================================
   // Class Method to open a saved configuration state file for
   // a database table.
   //==============================================================

   private static void openAction(JFrame parent)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      String fileName;

      // Choosing the directory to import data from.
      if (lastOpenSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastOpenSaveDirectory));

      // Add a FileFilter for *.myj and open dialog.
      dataFileChooser.setFileFilter(new MyJFileFilter());
      
      int result = dataFileChooser.showOpenDialog(parent);

      // Looks like might be good so lets check and read data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastOpenSaveDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Collect file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;

         // Try Loading the State.
         if (!fileName.equals(""))
         {  
            Thread loadTableStateThread = new Thread(new LoadTableStateThread(fileName),
                                                     "LoadTableStateThread");
            loadTableStateThread.start();
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }
   
   //==============================================================
   // Class Method to save the currented selected database table's
   // state, Ie. query, table columns, table row number, and sort/
   // search fields.
   //==============================================================

   private static void saveAction(JFrame parent, String actionCommand)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      TableTabPanel selectedTableTabPanel;
      String exportedTable, fileName;
      int resultsOfFileChooser;
      Object dumpData;
      
      // Setting up a file name based on whether there has
      // already been a save of the table or save as action.

      // Directory
      if (lastOpenSaveDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastOpenSaveDirectory));

      // Create the File Name from the selected database table
      // panel's state to be exported.
      
      selectedTableTabPanel = DBTablesPanel.getSelectedTableTabPanel();
      if (selectedTableTabPanel == null)
         return;
      exportedTable = selectedTableTabPanel.getTableName();

      if (actionCommand.equals(ACTION_SAVE) && !selectedTableTabPanel.getSaveFileName().equals(""))
         fileName = selectedTableTabPanel.getSaveFileName();
      else
      {
         if (!selectedTableTabPanel.getSaveFileName().equals(""))
            fileName = selectedTableTabPanel.getSaveFileName();
         else
         { 
            if (exportedTable.indexOf(".") != -1)
               fileName = exportedTable.replace('.', '_');
            else
               fileName = exportedTable;
            fileName += ".myj";
         }
      }
      dataFileChooser.setSelectedFile(new File(fileName));

      // Open the file chooser Dialog as needed.
      
      if (actionCommand.equals(ACTION_SAVE) && !selectedTableTabPanel.getSaveFileName().equals(""))
         resultsOfFileChooser = JFileChooser.APPROVE_OPTION;
      else
         resultsOfFileChooser = Utils.processFileChooserSelection(parent, dataFileChooser);

      // Looks like might be good so lets check and then write data.
      if (resultsOfFileChooser == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory and file name so can be used again.
         lastOpenSaveDirectory = dataFileChooser.getCurrentDirectory().toString();
         selectedTableTabPanel.setSaveFileName(dataFileChooser.getSelectedFile().getName());

         // Get the file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;

         // Save the state as needed.
         if (!fileName.equals(""))
         {
            dumpData = DBTablesPanel.getTableTabPanel(exportedTable).getState();
            Thread saveTableStateThread = new Thread(new SaveTableStateThread(fileName, dumpData),
                                                     "SaveTableStateThread");
            saveTableStateThread.start();
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }
   
   //==============================================================
   // Class Method to perform a screen print of the current view
   // of the application.
   //==============================================================

   private static void printAction()
   {
      // Method Instances
      Paper customPaper;
      double margin;
      AResourceBundle resourceBundle;
      String resourceTitle;
      
      // Setting up the printing.
      
      customPaper = new Paper();
      margin = 36;
      customPaper.setImageableArea(margin, margin,
                                   customPaper.getWidth() - margin * 2,
                                   customPaper.getHeight() - margin * 2);
      mPageFormat.setPaper(customPaper);

      // Printing the selected Tab
      currentPrintJob.setPrintable(DBTablesPanel.getSelectedTableTabPanel(), mPageFormat);

      // Should have graphics to print now so
      // lets try to print.
      if (currentPrintJob.printDialog())
      {
         try
         {
            currentPrintJob.print();
         }
         catch (PrinterException e)
         {
            resourceBundle = Ajqvue.getResourceBundle();
            resourceTitle = resourceBundle.getResourceString(
                                         "Main_JMenuBarActions.dialogtitle.PrinterException",
                                         "Printer Exception");
            
            JOptionPane.showMessageDialog(null, e.getMessage(), resourceTitle, JOptionPane.ERROR_MESSAGE);
         }
      }
   }

   //==============================================================
   // Class Method to perform the processing for a data import
   // action.
   //==============================================================

   private static void dataImportAction(JFrame parent, String actionCommand)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      AResourceBundle resourceBundle;
      String fileName, resource;
      String resourceOK, resourceCancel;

      // Choosing the directory/file to import data from.
      if (lastImportDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastImportDirectory));

      resourceBundle = Ajqvue.getResourceBundle();
      int result = dataFileChooser.showOpenDialog(parent);

      // Looks like might be good so lets check and write data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastImportDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Collect file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;
         // System.out.println(fileName);

         if (!fileName.equals(""))
         {
            // Data Import SQL Table(s)
            if (actionCommand.equals(ACTION_IMPORT_SQL_DUMP))
            {
               
               // Create a dialog to warn the user of possible
               // data overwriting. Also allow the selection
               // of reloading the database tables.
               
               InputDialog importWarningDialog;
               JLabel message;
               JCheckBox reloadDBTables;
               
               resource = resourceBundle.getResourceString(
                                     "Main_JMenuBarActions.label.WarningImport",
                                     "Warning Import May Cause Loss of Data!");
               message = new JLabel(resource, JLabel.CENTER);
               
               resource = resourceBundle.getResourceString(
                                     "Main_JMenuBarActions.checkbox.ReloadDatabaseTables",
                                     "Reload Database Tables?");
               reloadDBTables = new JCheckBox(resource, false);
               
               Object[] content = {message, reloadDBTables};

               resource = resourceBundle.getResourceString(
                                     "Main_JMenuBarActions.dialogtitle.ImportWarning",
                                     "Import Warning");
               resourceOK = resourceBundle.getResourceString("Main_JMenuBarActions.button.OK", "OK");
               resourceCancel = resourceBundle.getResourceString("Main_JMenuBarActions.button.Cancel",
                                                                 "Cancel");
               
               importWarningDialog = new InputDialog(null, resource, resourceOK, resourceCancel,
                                                     content, null);
               importWarningDialog.pack();
               importWarningDialog.center();
               importWarningDialog.setResizable(false);
               importWarningDialog.setVisible(true);

               // If conformation proceed.
               if (importWarningDialog.isActionResult())
               {
                  Thread sqlDataDumpImportThread;
                  
                  //  Load SQL file and reload the application
                  // with modified database tables as needed.
                  if (reloadDBTables.isSelected())
                     sqlDataDumpImportThread = new Thread(new SQLDataDumpImportThread(fileName, true),
                                                          "SQLDataDumpImportThread");
                  else
                     sqlDataDumpImportThread = new Thread(new SQLDataDumpImportThread(fileName, false),
                                                          "SQLDataDumpImportThread");
                  sqlDataDumpImportThread.start();
               }

               importWarningDialog.dispose();
            }

            // Date Import CSV File
            else if (actionCommand.equals(ACTION_IMPORT_CSV_FILE))
            {
               // Create a dialog to warn the user of possible
               // data overwriting and selecting Insert or Update.
               InputDialog insertUpdateDialog;

               // Insert/Update Content.
               ButtonGroup insertUpdateOptionsGroup = new ButtonGroup();
               JRadioButton insertRadioButton, updateRadioButton;
               
               resource = resourceBundle.getResourceString("Main_JMenuBarActions.radiobutton.Insert",
                                                           "Insert");
               insertRadioButton = new JRadioButton(resource, true);
               insertUpdateOptionsGroup.add(insertRadioButton);
               
               resource = resourceBundle.getResourceString("Main_JMenuBarActions.radiobutton.Update",
                                                           "Update");
               updateRadioButton = new JRadioButton(resource, false);
               insertUpdateOptionsGroup.add(updateRadioButton);

               resource = resourceBundle.getResourceString("Main_JMenuBarActions.label.WarningImport",
                                                           "Warning Import May Cause Loss of Data!");
               
               Object content[] = {resource, insertRadioButton, updateRadioButton};
               
               resource = resourceBundle.getResourceString(
                                     "Main_JMenuBarActions.dialogtitle.InsertOrUpdate",
                                     "Insert Or Update?"); 
               resourceOK = resourceBundle.getResourceString("Main_JMenuBarActions.button.OK",
                                                             "OK");
               resourceCancel = resourceBundle.getResourceString("Main_JMenuBarActions.button.Cancel",
                                                                 "Cancel");
                  
               insertUpdateDialog = new InputDialog(null, resource, resourceOK, resourceCancel,
                                                     content, null);
               insertUpdateDialog.pack();
               insertUpdateDialog.setResizable(false);
               insertUpdateDialog.center();
               insertUpdateDialog.setVisible(true);

               // If ok proceed.
               if (insertUpdateDialog.isActionResult())
               {
                  String csvOption;

                  if (insertRadioButton.isSelected())
                     csvOption = insertRadioButton.getText();
                  else
                     csvOption = updateRadioButton.getText();

                  Thread csvDataImportThread = new Thread(new CSVDataImportThread(fileName, csvOption,
                                                                                  false),
                                                          "CSVDataImportThread");
                  csvDataImportThread.start();
               }

               insertUpdateDialog.dispose();
            }
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }

   //==============================================================
   // Class Method to perform the processing for an data export
   // action.
   //==============================================================

   private static void dataExportAction(JFrame parent, String actionCommand,
                                        String[] version)
   {
      // Method Instances.
      JFileChooser dataFileChooser;
      String fileName;
      String exportedTable, database;
      boolean useLimit;
      
      ArrayList<String> tableHeadings;
      HashMap<String, String> tableColumnNamesHashMap;
      HashMap<String, String> tableColumnClassHashMap;
      HashMap<String, String> tableColumnTypeHashMap;
      HashMap<String, Integer> tableColumnSizeHashMap;
      JTable summaryListTable;

      // Initializing
      
      if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE) || actionCommand.equals(ACTION_EXPORT_SQL_TABLE))
         useLimit = false;
      else
      {
         if (actionCommand.equals(ACTION_EXPORT_CSV_SUMMARY_TABLE))
            useLimit = DBTablesPanel.getDataExportProperties().getCSVSummaryTableUseLimit();
         else
            useLimit = DBTablesPanel.getDataExportProperties().getSQLSummaryTableUseLimit();
      }
      
      tableHeadings = new ArrayList <String>();
      tableColumnNamesHashMap = new HashMap <String, String>();
      tableColumnClassHashMap = new HashMap <String, String>();
      tableColumnTypeHashMap = new HashMap <String, String>();
      tableColumnSizeHashMap = new HashMap <String, Integer>();
      summaryListTable = null;

      // Setting up a default file name based on the selected
      // database, or table and date.

      if (lastExportDirectory.equals(""))
         dataFileChooser = new JFileChooser();
      else
         dataFileChooser = new JFileChooser(new File(lastExportDirectory));

      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
      database = ConnectionManager.getConnectionProperties().getProperty(ConnectionProperties.DB);
      if (database.indexOf(";") != -1)
         database = database.substring(0, database.indexOf(";"));
      
      if (DBTablesPanel.getSelectedTableTabPanel() == null)
         return;
      
      exportedTable = DBTablesPanel.getSelectedTableTabPanel().getTableName();

      if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE))
         fileName = database;
      else if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE_SCHEME))
         fileName = database + "_scheme";
      else
      {
         if (exportedTable.indexOf(".") != -1)
            fileName = exportedTable.replace('.', '_');
         else
            fileName = exportedTable;
      }

      fileName += "_" + dateFormat.format(new Date());

      if (actionCommand.indexOf(DATA_EXPORT_CSV) != -1)
         fileName += ".csv";
      else if (actionCommand.indexOf(DATA_EXPORT_PDF) != -1)
         fileName += ".pdf";
      // DATA_EXPORT_SQL
      else
         fileName += ".sql";

      dataFileChooser.setSelectedFile(new File(fileName));

      int result = Utils.processFileChooserSelection(parent, dataFileChooser);

      // Looks like might be good so lets check and then write data.
      if (result == JFileChooser.APPROVE_OPTION)
      {
         // Save the selected directory so can be used again.
         lastExportDirectory = dataFileChooser.getCurrentDirectory().toString();

         // Set the file name.
         fileName = dataFileChooser.getSelectedFile().getName();
         fileName = dataFileChooser.getCurrentDirectory() + fileSeparator + fileName;
         // System.out.println(fileName);

         if (!fileName.equals(""))
         {
            // Select the table and fields to export and
            // then outputting the data via the appropriate
            // approach.
            
            if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE)
                || actionCommand.equals(ACTION_EXPORT_CSV_SUMMARY_TABLE)
                || actionCommand.equals(ACTION_EXPORT_PDF_SUMMARY_TABLE)
                || actionCommand.equals(ACTION_EXPORT_SQL_TABLE)
                || actionCommand.equals(ACTION_EXPORT_SQL_SUMMARY_TABLE))
            {
               tableColumnNamesHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnNamesHashMap();
               tableColumnClassHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnClassHashMap();
               tableColumnTypeHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnTypeHashMap();
               tableColumnSizeHashMap = (DBTablesPanel.getSelectedTableTabPanel()).getColumnSizeHashMap();
            }

            // Data Export CSV Whole Table or Summary Table
            
            if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE)
                || actionCommand.equals(ACTION_EXPORT_CSV_SUMMARY_TABLE))
            {
               // Collect appropriate table columns.
               if (actionCommand.equals(ACTION_EXPORT_CSV_TABLE))
                  tableHeadings = (DBTablesPanel.getSelectedTableTabPanel()).getAllTableHeadings();
               else
               {  
                  for (int i = 0; i < DBTablesPanel.getSelectedTableTabPanel()
                        .getListTable().getColumnCount(); i++)
                     tableHeadings.add(DBTablesPanel.getSelectedTableTabPanel()
                        .getListTable().getColumnName(i));
               }
                  
               Thread csvDataDumpThread = new Thread(new CSVDataDumpThread(tableHeadings,
                                                                           tableColumnNamesHashMap,
                                                                           useLimit,
                                                                           tableColumnClassHashMap,
                                                                           tableColumnTypeHashMap,
                                                                           tableColumnSizeHashMap,
                                                                           exportedTable, fileName),
                                                     "CSVDataDumpThread");
               csvDataDumpThread.start();
            }
            
            // Data Export PDF Summary Table
            
            else if (actionCommand.equals(ACTION_EXPORT_PDF_SUMMARY_TABLE))
            {
               summaryListTable = (DBTablesPanel.getSelectedTableTabPanel()).getListTable();
               if (summaryListTable != null)
               {
                  Thread pdfDataTableDumpThread = new Thread(new PDFDataTableDumpThread(summaryListTable,
                                                                                        tableColumnTypeHashMap,
                                                                                        exportedTable,
                                                                                        fileName),
                                                             "PDFDataTableDumpThread");
                  pdfDataTableDumpThread.start();
               }
            }

            // Data Export SQL Whole Table or Summary Table
            
            else if (actionCommand.equals(ACTION_EXPORT_SQL_TABLE)
                     || actionCommand.equals(ACTION_EXPORT_SQL_SUMMARY_TABLE))
            {
               // Collect appropriate table columns.
               if (actionCommand.equals(ACTION_EXPORT_SQL_TABLE))
                  tableHeadings = (DBTablesPanel.getSelectedTableTabPanel()).getAllTableHeadings();
               else
                  tableHeadings = (DBTablesPanel.getSelectedTableTabPanel()).getCurrentTableHeadings();
               
               Thread sqlDataDumpThread = new Thread(new SQLDataDumpThread(tableHeadings,
                                                                           tableColumnNamesHashMap, useLimit,
                                                                           tableColumnClassHashMap,
                                                                           tableColumnTypeHashMap,
                                                                           exportedTable, fileName,
                                                                           version),
                                                                           "SQLDataDumpThread");
               sqlDataDumpThread.start();
            }

            // Data Export SQL Database
            
            else if (actionCommand.equals(ACTION_EXPORT_SQL_DATABASE))
            {
               Thread sqlDatabaseDumpThread = new Thread(new SQLDatabaseDumpThread(
                  fileName, version), "SQLDatabaseDumpThread");
               sqlDatabaseDumpThread.start();
            }

            // Data Export SQL Database Scheme. Must be "DESQLDS", ACTION_EXPORT_SQL_DATABASE_SCHEME.
            
            else
            {
               Thread sqlDatabaseSchemeDumpThread = new Thread(
                  new SQLDatabaseSchemeDumpThread(fileName, version),
                  "SQLDatabaseSchemeDumpThread");
               sqlDatabaseSchemeDumpThread.start();
            }
         }
         else
         {
            createFileNotFoundDialog();
         }
      }
   }

   //==============================================================
   // Class Method to flush privileges for the a special case of
   // the user being root and connected to a mysql database.
   //==============================================================

   private static boolean flushPrivileges() throws SQLException
   {
      // Class Method Instances.
      String sqlStatementString;
      Statement mysqlStatement;
      ResultSet db_resultSet;
      boolean flushSuccess;

      // Get Connection to Database.
      Connection dbConnection = ConnectionManager.getConnection(
         "Main_JMenuBarActions.flushPrivileges()");
      
      if (dbConnection == null)
         return false;

      // Connecting to the data base, to obtain
      // the selected entry.
      
      mysqlStatement = null;
      db_resultSet = null;
      flushSuccess = false;
      
      try
      {
         // Begin the SQL statement creation.
         mysqlStatement = dbConnection.createStatement();
         sqlStatementString = "FLUSH PRIVILEGES";
         // System.out.println(sqlStatementString);

         // Might want to use the result at a later version.
         db_resultSet = mysqlStatement.executeQuery(sqlStatementString);

         db_resultSet.close();
         flushSuccess = true;
      }
      catch (SQLException e)
      {
         ConnectionManager.displaySQLErrors(e, "Main_JMenuBarActions.flushPrivileges()");
      }
      finally
      {
         try
         {
            if (mysqlStatement != null)
               mysqlStatement.close();
         }
         catch (SQLException sqle)
         {
            ConnectionManager.displaySQLErrors(sqle, "Main_JMenuBarActions.flushPrivileges()");
         }
         finally
         {
            if (db_resultSet != null)
               db_resultSet.close();
         }
      }

      ConnectionManager.closeConnection(dbConnection, "Main_JMenuBarActions.flushPrivileges()");
      return flushSuccess;
   }
   
   //==============================================================
   // Class Method to show a file not found dialog.
   //==============================================================

   private static void createFileNotFoundDialog()
   {
      // Method Instances
      AResourceBundle resourceBundle;
      String resourceTitle, resourceMessage;
      
      // Create the dialog.
      resourceBundle = Ajqvue.getResourceBundle();
      resourceTitle = resourceBundle.getResourceString("Main_JMenuBarActions.dialogtitle.Alert",
                                                       "Alert");
      resourceMessage = resourceBundle.getResourceString(
                                   "Main_JMenuBarActions.dialogmessage.FileNOTFound",
                                   "File NOT Found");
      
      JOptionPane.showMessageDialog(null, resourceMessage, resourceTitle, JOptionPane.ERROR_MESSAGE);
   }

   //==============================================================
   // Class Method to allow the setting the preferencesVisible
   // instance. Insure not more than one PreferencesFrame will be
   // open at one time.
   //==============================================================

   protected static void setPreferencesNotVisisble()
   {
      preferencesVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the sqlQueryBucketFrameVisible
   // instance.
   //==============================================================
   
   protected static void setSQLQueryBucketFrameNotVisisble()
   {
      sqlQueryBucketFrameVisible = false;
   }

   //==============================================================
   // Class Method to allow the setting the queryFrameVisible
   // instance. Insure not more than one QueryFrame will be
   // created.
   //==============================================================

   protected static void setQueryFrameNotVisisble()
   {
      queryFrameVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the searchFrameVisible
   // instance. Insure not more than one SearchyFrame will be
   // created.
   //==============================================================

   protected static void setSearchFrameNotVisisble()
   {
      searchFrameVisible = false;
   }
   
   //==============================================================
   // Class Method to allow the setting the pluginFrameVisible
   // instance. Insure not more than one PluginFrame will be
   // created.
   //==============================================================

   protected static void setPluginFrameNotVisisble()
   {
      pluginFrameVisible = false;
   }
}
